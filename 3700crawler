#!/usr/bin/env python3

import argparse, socket, ssl, html.parser, urllib.parse 

DEFAULT_SERVER = "project5.3700.network"
DEFAULT_PORT = 443

# Nick's Login: 
# username: coury.ni
# password: 001477153

class Crawler:
    def __init__(self, args):
        self.server = args.server
        self.port = args.port
        self.username = args.username
        self.password = args.password

    def gen_post_msg (self, username, password, token) :
        msg = "POST / HTTP/1.0\r\n "

    def run(self):
        # Establishes connection
        request = "GET / HTTP/1.0\r\n\r\n"
        print("Request to %s:%d" % (self.server, self.port))
        print(request)
        print("------------\n")

        # Init the socket and wrap in SSL 
        mysocket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        context = ssl.SSLContext()
        mysocket = context.wrap_socket(mysocket, server_hostname=self.server)

        # Connects to the server @ port 
        mysocket.connect((self.server, self.port))

        # Get the HTML structure of the login page in order to get the session crf 
        html_request = "GET / HTTP/1.0\r\n\r\n"
        print("HTML request to %s:%d" % (self.server, self.port))
        print(html_request)
        print("------------\n")

        # Get the HTML request response 
        data = mysocket.recv(1000)
        print("HTML response:\n%s" % data.decode('ascii'))
        print("------------\n")

        # Send a POST message with the username and password 
        #post_msg = self.gen_post_msg(self.username, self.password, token)
         
        mysocket.send(request.encode('ascii'))

        done = False

        #while not done: 
        #for i in range (4) :
            #print ("[%d]" % i)
        data = mysocket.recv(1000)
        print("Response:\n%s" % data.decode('ascii'))

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='crawl Fakebook')
    parser.add_argument('-s', dest="server", type=str, default=DEFAULT_SERVER, help="The server to crawl")
    parser.add_argument('-p', dest="port", type=int, default=DEFAULT_PORT, help="The port to use")
    parser.add_argument('username', type=str, help="The username to use")
    parser.add_argument('password', type=str, help="The password to use")
    args = parser.parse_args()
    sender = Crawler(args)
    sender.run()
